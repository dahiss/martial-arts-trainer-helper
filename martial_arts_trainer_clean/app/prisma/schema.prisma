
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/martial_arts_trainer/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  techniqueProgress TechniqueProgress[]
  trainingLogs      TrainingLog[]
  goals             Goal[]
  
  @@map("users")
}

model Technique {
  id          String @id @default(cuid())
  name        String
  nameEn      String
  category    TechniqueCategory
  description String
  keyPoints   String[]
  imageUrl    String?
  difficulty  Int @default(1) // 1-5 scale
  
  // Relations
  progress TechniqueProgress[]
  
  @@map("techniques")
}

model TechniqueProgress {
  id          String @id @default(cuid())
  userId      String
  techniqueId String
  mastered    Boolean @default(false)
  confidence  Int     @default(1) // 1-5 scale
  lastPracticed DateTime?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  technique Technique @relation(fields: [techniqueId], references: [id], onDelete: Cascade)
  
  @@unique([userId, techniqueId])
  @@map("technique_progress")
}

model TrainingLog {
  id          String @id @default(cuid())
  userId      String
  date        DateTime @default(now())
  type        TrainingType
  duration    Int // in minutes
  intensity   Int @default(3) // 1-5 scale
  techniques  String[] // array of technique IDs practiced
  notes       String?
  mood        Int @default(3) // 1-5 scale (how you felt)
  energy      Int @default(3) // 1-5 scale (energy level)
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("training_logs")
}

model Goal {
  id          String @id @default(cuid())
  userId      String
  title       String
  description String?
  targetDate  DateTime?
  completed   Boolean @default(false)
  progress    Int @default(0) // 0-100 percentage
  category    GoalCategory
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("goals")
}

model Combination {
  id          String @id @default(cuid())
  name        String
  nameEn      String
  techniques  String[] // array of technique names/IDs in order
  difficulty  Int @default(1) // 1-5 scale
  description String?
  tips        String[]
  category    CombinationCategory
  
  @@map("combinations")
}

enum TechniqueCategory {
  PUNCHES      // Uderzenia rękami
  KICKS        // Kopnięcia
  DEFENSIVE    // Obrona
  FOOTWORK     // Praca nóg
  CLINCH       // Klinczowanie
}

enum TrainingType {
  TECHNIQUE    // Trening techniczny
  CONDITIONING // Trening kondycyjny
  BAG_WORK     // Praca na worku
  SHADOWBOXING // Cienie
  STRENGTH     // Siła
  FLEXIBILITY  // Rozciąganie
  SPARRING     // Sparring
}

enum GoalCategory {
  TECHNIQUE    // Cel techniczny
  FITNESS      // Cel kondycyjny
  FLEXIBILITY  // Cel elastyczności
  MENTAL       // Cel mentalny
  COMPETITION  // Cel zawodniczy
}

enum CombinationCategory {
  BASIC        // Podstawowe
  INTERMEDIATE // Średniozaawansowane
  ADVANCED     // Zaawansowane
  HAND_ONLY    // Tylko ręce
  KICK_ONLY    // Tylko nogi
  MIXED        // Mieszane
}
